<?php

namespace Sportnetzwerk\SpnBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Form\Form;
use Symfony\Component\HttpFoundation\Session\Session;
use Sportnetzwerk\SpnBundle\Entity\PlayerSportsSkills;
use Sportnetzwerk\SpnBundle\Entity\Skilllevels;
use Sportnetzwerk\SpnBundle\Entity\Sports;


/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{
    
    private $created = null;
    
       
    public function insertPlayerData(\Symfony\Component\Form\Form $form)
    {
        
        $sportList =  $form->get('sports')->getData();
        $this->created = time();
        $player = new Player();
        $gender = $form->get('gender')->getData();
        $player->setName($form->get('name')->getData());
        $player->setLastname($form->get('name')->getData());
        $player->setEmail($form->get('email')->getData());
        $player->setUsername($form->get('email')->getData());
        $player->setPassword(md5($form->get('password')->getData()));
        $player->setBirthday(strtotime($form->get('birthday')->getData()->format('d-m-Y')));
        $player->setSports(implode(':', $sportList));
        $player->setGender($gender->getId());
        $player->setActivityradius(10);//default
        $player->setCreated($this->created);
        $player->setPopularity('1');//default
        $player->setZipcode($form->get('zipcode')->getData());
        $player->setEvaluate('1');//can be modified in administration
        $player->setPlayerstatus(1);//can be modified in administration
        $player->setSkills('1:1:1');//default
        $player->setRegistered(0);
        $player->setOnline(0);
        $em = $this->getEntityManager();
        $em->persist($player);
        //populate player_sports_skills
        //cross reference table(entity) matches chosen sports with specific skills
        foreach( $sportList as $k => $v ){
            $pss = new PlayerSportsSkills();
            $pss->setPlayerId($player);
            $skill = $this->_em->getRepository("SportnetzwerkSpnBundle:Skilllevels")->findByName('pro');
            ///trigger_error(var_export($skill, true));
            $pss->setSkilllevelsId($skill[0]);
            $sport = $this->_em->getRepository("SportnetzwerkSpnBundle:Sports")->findById($v);
            $pss->setSportsId($sport[0]);
            $emLoop = $this->getEntityManager();
            $emLoop->persist($pss);
            $emLoop->flush();
            unset($pss);
            
        }
        $em->flush();
    }
    
    /**
     * Generates a token for the activation email confirmation
     */
    public function generatePlayerToken(\Symfony\Component\Form\Form $form)
    {
        return md5($this->created.$form->get('name')->getData().$form->get('email')->getData());
    }
    
    
    public function validatePlayerToken($id, $token)
    {
        $player = $this->findById($id);
        if( empty($player) )
        {
            //trigger_error('no player object');
            return false;
        }
        if( $token === (md5($player[0]->getCreated().$player[0]->getName().$player[0]->getEmail())) )
        {
            if( (time() - $player[0]->getCreated()) < (24 * 3600))
            {
                //initialize session e.g
                return true;
                
            }
            else{
                /**
                 *@todo logger for delayed activation attempts
                 */
                //trigger_error('activation time exceeded');
                return false;
            }
        }
        //trigger_error('token error');
        return false;
    }
    
    public function startPlayerSession($id)
    {
        $player = $this->findById($id);
        $session = new Session();
        $session->start(); 
        $session->set('userid', $id);
        $session->set('fullname', $player[0]->getName());
        $session->getFlashBag()->add('notice', 'Welcome '.$session->get('fullname'));
        $fullName = $session->get('fullname');
        
        return $fullName;
        
    }
    
    /**
     * wrapper over findBy 
     * @deprecated var path
     */
    public function retrievePlayer($id, $path){
        $player = $this->findById($id);
        if( $player[0] instanceof Player){
            return $player[0];
        }
        return false;
    }

    
    public function login($username, $password)
    {
        
        $player = $this->findByEmail($username);//email == username, the author
        //trigger_error(var_export($player[0], true));
        if(empty($player[0])){
            return false;
        }
        if( $player[0]->getPassword() == md5($password) ){
            $session = new Session();
            $session->start();
            $session->set('userid', $player[0]->getId());
            $session->set('fullname', $player[0]->getName());
            //set the user(flag) online
            
            $player[0]->setOnline(1);
            return true;
        }
        return false;
    }
    
    public function updateRegistrationFlag( Player $player, $flag  )
    {
        $em = $this->getEntityManager();
        $player->setRegistered($flag);
        $em->persist($player);
        $em->flush();
    }
    
    public function updateOnlineFlag( $email, $flag  )
    {
        //trigger_error('update '.$email);
        $player = $this->findByEmail($email);
        $em = $this->getEntityManager();
        $player[0]->setOnline($flag);
        $em->persist($player[0]);
        $em->flush();
    }
    
    public function getPlayerSports($email)
    {
        $player = $this->findByEmail($email);
        $em = $this->getEntityManager();

        return explode(':', $player[0]->getSports());
    }
    
    public function getPlayersCandidates($zip, $numOfPlayers, $sportsId, $skill, $start, $end)
    {
        $candidates = array();
        $actualCandidates = array();
        //http://stackoverflow.com/questions/22658193/dql-leftjoin-error-expected-literal-got-join
        $qb = $this->createQueryBuilder('pl')
        ->from('SportnetzwerkSpnBundle:PlayerSportsSkills', 'plss')       
        ->where('pl.zipcode = ?1')
        ->andWhere('pl.playerstatus = ?2')
        ->andWhere('pl.registered = ?3')
        ->andWhere('plss.playerId = pl.id')
        ->andWhere('plss.sportsId = ?4')
        ->andWhere('plss.skilllevelsId = ?5') 
                   ->setParameters(array(1 => $zip, 
                       2 => 1, 
                       3 => 1, 
                       4 => $sportsId,
                       5 => $skill,
                       ))
                   ->setMaxResults($numOfPlayers);
        $candidates = $qb->getQuery()->getResult();
        
        //check for collisions
        foreach ($candidates as $k => $v){
            if( $this->blockedByEvent($candidates[$k], $start, $end) ){
                continue;;
            }
            $actualCandidates[] = $candidates[$k];
        }
        
        return $actualCandidates;
    }
    
    /**
     * Checks if a candidate is blocked by some other event
     * Checks for schedule collisions
     * @param \Sportnetzwerk\SpnBundle\Entity\Player $player
     * @param type $start current event start
     * @param type $end current event end
     */
    public function blockedByEvent( Player $player, $start, $end ){
        $blockedCandidate = array();
        $qb = $this->createQueryBuilder('pl')
                ->where('pl.id = ?1')
        ->innerJoin('SportnetzwerkSpnBundle:PlayerEvents', 'ple', 'with', 'ple.player = pl.id')
        ->innerJoin('SportnetzwerkSpnBundle:Events', 'e', 'with', 'e.id = ple.event AND (e.start < ?2 AND e.end > ?3) AND ple.accepted = 1' )   
        
        ->setParameters(array(1 => $player->getId(), 2 => $end, 3 => $start));
         $blockedCandidate = $qb->getQuery()->getResult();
        
         return empty($blockedCandidate) ? false : true;
    }
}